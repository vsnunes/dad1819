//Tiny Parser Generator v1.3
//Copyright Â© Herre Kuijpers 2008-2012
<% @TinyPG Namespace="DIDA_CLIENT" %>

//Terminals
READ		-> @"read";
ADD		-> @"add";
TAKE		-> @"take";
TUPLE_START	-> @"<";
TUPLE_END	-> @">";
FIELD_SEP	-> @",";
IDENTIFIER    -> @"[a-zA-Z_][a-zA-Z0-9_]*";
STRING        -> @"@?\""(\""\""|[^\""])*\""";
NUMBER        -> @"[0-9]+";

FUNCTION_START -> @"\(";
FUNCTION_END  -> @"\)";

EOF               	-> @"^$";


[Skip]
WHITESPACE        	-> @"\s+";

Start -> Instruction Tuple EOF {return $Tuple;};
Instruction -> READ | ADD | TAKE;
Tuple -> TUPLE_START Fields TUPLE_END {return new DIDA_LIBRARY.Tuple((List<object>)$Fields);};
Fields -> Field (FIELD_SEP Field)* 
{List<object> fd = new List<object>(); 
	fd.Add($Field);
	int i = 1;
	while ($Field[i] != null) { 
		fd.Add($Field[i++]);     
    	}
	return fd;

};
Field -> STRING | Function | NUMBER
{
	if ($STRING != null)
		return ((string)($STRING)).TrimStart('"').TrimEnd('"');
	else if($NUMBER != null)
		return Convert.ToInt32($NUMBER);
	else return $Function;
	
};

Function -> IDENTIFIER FUNCTION_START Args* FUNCTION_END
{
	//NASTY HAMMER
	int i = 0;
	object[] args = null;
	object one = null;
	object two = null;
	object three = null;

	args= (object[])$Args;
	one = args[0];
	two = args[1];
	if (args.Length >= 3)
		three = args[3];

	switch($IDENTIFIER) {
		case "DADTestA":
			return new DIDA_LIBRARY.DADTestA((int)one, (string)two);
		case "DADTestB":
			return new DIDA_LIBRARY.DADTestB((int)one, (string)two, (int)three);
		case "DADTestC":
			return new DIDA_LIBRARY.DADTestC((int)one, (string)two, (string)three);


	}
	return null;

};
Args -> Arg (FIELD_SEP Arg)*
{
	List<object> l = new List<object>();
	l.Add($Arg);
	int i = 1;
	while ($Arg[i] != null) { 
		l.Add($Arg[i++]);     
    	}
	return l.ToArray();

};
Arg -> STRING | Function | NUMBER
{
	if ($STRING != null)
		return ((string)($STRING)).TrimStart('"').TrimEnd('"');
	else if($NUMBER != null)
		return Convert.ToInt32($NUMBER);
	else return $Function;
	
};


